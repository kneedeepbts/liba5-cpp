#include "doctest.h"

#include "spdlog/spdlog.h"

#include "../rijndael.h"

/*
 * Test Data has been pulled from "3GPP TS 35.207 V12.0.0 (2014-10)".
 */

TEST_CASE("Testing the Rijndael class with (3.3) Test Set 1") {
    spdlog::set_level(spdlog::level::info);

    kneedeepbts::crypto::RijndaelKey key{0x46, 0x5b, 0x5c, 0xe8, 0xb1, 0x99, 0xb4, 0x9f, 0xaa, 0x5f, 0x0a, 0x2e, 0xe2, 0x38, 0xa6, 0xbc};
    std::array<uint8_t, 16> input{0xee, 0x36, 0xf7, 0xcf, 0x03, 0x7d, 0x37, 0xd3, 0x69, 0x2f, 0x7f, 0x03, 0x99, 0xe7, 0x94, 0x9a};
    std::array<uint8_t, 16> expected{0x9e, 0x29, 0x80, 0xc5, 0x97, 0x39, 0xda, 0x67, 0xb1, 0x36, 0x35, 0x5e, 0x3c, 0xed, 0xe6, 0xa2};

    kneedeepbts::crypto::Rijndael dut_rijndael = kneedeepbts::crypto::Rijndael(key);
    std::array<uint8_t, 16> output = dut_rijndael.encrypt(input);

    for (int i = 0; i < 16; i++) {
        CHECK(expected[i] == output[i]);
    }
}

TEST_CASE("Testing the Rijndael class with (3.4) Test Set 2") {
    spdlog::set_level(spdlog::level::info);

    kneedeepbts::crypto::RijndaelKey key{0x03, 0x96, 0xeb, 0x31, 0x7b, 0x6d, 0x1c, 0x36, 0xf1, 0x9c, 0x1c, 0x84, 0xcd, 0x6f, 0xfd, 0x16};
    std::array<uint8_t, 16> input{0x93, 0xcc, 0x36, 0x40, 0xc5, 0xd6, 0xa5, 0x21, 0xd8, 0x12, 0x35, 0xbd, 0x08, 0x82, 0xbf, 0x0a};
    std::array<uint8_t, 16> expected{0x00, 0x9a, 0x9e, 0x09, 0x96, 0x56, 0x15, 0x25, 0xf6, 0x11, 0x66, 0x7b, 0xbf, 0x79, 0xe2, 0x26};

    kneedeepbts::crypto::Rijndael dut_rijndael = kneedeepbts::crypto::Rijndael(key);
    std::array<uint8_t, 16> output = dut_rijndael.encrypt(input);

    for (int i = 0; i < 16; i++) {
        CHECK(expected[i] == output[i]);
    }
}

TEST_CASE("Testing the Rijndael class with (3.5) Test Set 3") {
    spdlog::set_level(spdlog::level::info);

    kneedeepbts::crypto::RijndaelKey key{0xfe, 0xc8, 0x6b, 0xa6, 0xeb, 0x70, 0x7e, 0xd0, 0x89, 0x05, 0x75, 0x7b, 0x1b, 0xb4, 0x4b, 0x8f};
    std::array<uint8_t, 16> input{0x8f, 0x7a, 0x8f, 0x0d, 0x10, 0x8b, 0x7f, 0x2d, 0x97, 0xa5, 0x3e, 0xac, 0xc1, 0xd9, 0x58, 0xd9};
    std::array<uint8_t, 16> expected{0x5d, 0x9b, 0xce, 0x85, 0x4d, 0xec, 0xaf, 0x0d, 0xa9, 0x3d, 0x28, 0xb7, 0xe3, 0x5f, 0x60, 0x8c};

    kneedeepbts::crypto::Rijndael dut_rijndael = kneedeepbts::crypto::Rijndael(key);
    std::array<uint8_t, 16> output = dut_rijndael.encrypt(input);

    for (int i = 0; i < 16; i++) {
        CHECK(expected[i] == output[i]);
    }
}

TEST_CASE("Testing the Rijndael class with (3.6) Test Set 4") {
    spdlog::set_level(spdlog::level::info);

    kneedeepbts::crypto::RijndaelKey key{0x9e, 0x59, 0x44, 0xae, 0xa9, 0x4b, 0x81, 0x16, 0x5c, 0x82, 0xfb, 0xf9, 0xf3, 0x2d, 0xb7, 0x51};
    std::array<uint8_t, 16> input{0x68, 0xc9, 0x8b, 0xbf, 0xab, 0x62, 0x8e, 0xc1, 0xad, 0xf2, 0xa3, 0xd9, 0x0c, 0x34, 0xa7, 0x51};
    std::array<uint8_t, 16> expected{0xdb, 0x29, 0x44, 0xcc, 0xe8, 0xe6, 0x83, 0xcd, 0x03, 0xff, 0xf1, 0x99, 0x31, 0xa1, 0x21, 0x35};

    kneedeepbts::crypto::Rijndael dut_rijndael = kneedeepbts::crypto::Rijndael(key);
    std::array<uint8_t, 16> output = dut_rijndael.encrypt(input);

    for (int i = 0; i < 16; i++) {
        CHECK(expected[i] == output[i]);
    }
}

TEST_CASE("Testing the Rijndael class with (3.7) Test Set 5") {
    spdlog::set_level(spdlog::level::info);

    kneedeepbts::crypto::RijndaelKey key{0x4a, 0xb1, 0xde, 0xb0, 0x5c, 0xa6, 0xce, 0xb0, 0x51, 0xfc, 0x98, 0xe7, 0x7d, 0x02, 0x6a, 0x84};
    std::array<uint8_t, 16> input{0xa8, 0x40, 0xb1, 0xdd, 0x60, 0x24, 0x9a, 0xa3, 0x22, 0x01, 0x6b, 0x4b, 0x31, 0xda, 0xf3, 0xb8};
    std::array<uint8_t, 16> expected{0x02, 0xbf, 0xfa, 0xda, 0x71, 0x37, 0xc4, 0x92, 0xc0, 0x0e, 0x84, 0x52, 0xd8, 0xc7, 0x6e, 0xaa};

    kneedeepbts::crypto::Rijndael dut_rijndael = kneedeepbts::crypto::Rijndael(key);
    std::array<uint8_t, 16> output = dut_rijndael.encrypt(input);

    for (int i = 0; i < 16; i++) {
        CHECK(expected[i] == output[i]);
    }
}

TEST_CASE("Testing the Rijndael class with (3.8) Test Set 6") {
    spdlog::set_level(spdlog::level::info);

    kneedeepbts::crypto::RijndaelKey key{0x6c, 0x38, 0xa1, 0x16, 0xac, 0x28, 0x0c, 0x45, 0x4f, 0x59, 0x33, 0x2e, 0xe3, 0x5c, 0x8c, 0x4f};
    std::array<uint8_t, 16> input{0xd6, 0x67, 0x89, 0xef, 0xf5, 0x99, 0x6b, 0x9c, 0xff, 0xd8, 0x9e, 0x0a, 0x77, 0x14, 0x86, 0x57};
    std::array<uint8_t, 16> expected{0xbd, 0xf2, 0x26, 0xfe, 0xcf, 0x9f, 0xf9, 0x96, 0x1e, 0x5c, 0x26, 0x21, 0xb7, 0x64, 0xef, 0xb1};

    kneedeepbts::crypto::Rijndael dut_rijndael = kneedeepbts::crypto::Rijndael(key);
    std::array<uint8_t, 16> output = dut_rijndael.encrypt(input);

    for (int i = 0; i < 16; i++) {
        CHECK(expected[i] == output[i]);
    }
}
