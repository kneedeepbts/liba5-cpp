#include "doctest/doctest.h"

#include "spdlog/spdlog.h"

#include "../milenage.h"

/*
 * Test Data has been pulled from "3GPP TS 35.207 V12.0.0 (2014-10)".
 */

// F1
TEST_CASE("Testing the Milenage class with (4.3) Test Set 1") {
    spdlog::set_level(spdlog::level::info);
    kneedeepbts::crypto::MilenageKey t_key{0x46, 0x5b, 0x5c, 0xe8, 0xb1, 0x99, 0xb4, 0x9f, 0xaa, 0x5f, 0x0a, 0x2e, 0xe2, 0x38, 0xa6, 0xbc};
    kneedeepbts::crypto::MilenageKey t_rand{0x23, 0x55, 0x3c, 0xbe, 0x96, 0x37, 0xa8, 0x9d, 0x21, 0x8a, 0xe6, 0x4d, 0xae, 0x47, 0xbf, 0x35};
    std::array<uint8_t, 6> t_sqn = {0xff, 0x9b, 0xb4, 0xd0, 0xb6, 0x07};
    std::array<uint8_t, 2> t_amf = {0xb9, 0xb9};
    std::array<uint8_t, 16> t_op = {0xcd, 0xc2, 0x02, 0xd5, 0x12, 0x3e, 0x20, 0xf6, 0x2b, 0x6d, 0x67, 0x6a, 0xc7, 0x2c, 0xb3, 0x18};

    std::array<uint8_t, 8> expected_f1 = {0x4a, 0x9f, 0xfa, 0xc3, 0x54, 0xdf, 0xaf, 0xb3};
    std::array<uint8_t, 8> expected_f1_star = {0x01, 0xcf, 0xaf, 0x9e, 0xc4, 0xe8, 0x71, 0xe9};

    kneedeepbts::crypto::Milenage dut_milenage(t_key, t_rand);
    dut_milenage.setOp(t_op);
    dut_milenage.runF1(t_sqn, t_amf);

    std::array<uint8_t, 8> output_f1 = dut_milenage.getMACA();
    std::array<uint8_t, 8> output_f1_star = dut_milenage.getMACS();

    for (int i = 0; i < 8; i++) {
        CHECK(expected_f1[i] == output_f1[i]);
        CHECK(expected_f1_star[i] == output_f1_star[i]);
    }
}

TEST_CASE("Testing the Milenage class with (4.4) Test Set 2") {
    spdlog::set_level(spdlog::level::info);
    kneedeepbts::crypto::MilenageKey t_key{0x03, 0x96, 0xeb, 0x31, 0x7b, 0x6d, 0x1c, 0x36, 0xf1, 0x9c, 0x1c, 0x84, 0xcd, 0x6f, 0xfd, 0x16};
    kneedeepbts::crypto::MilenageKey t_rand{0xc0, 0x0d, 0x60, 0x31, 0x03, 0xdc, 0xee, 0x52, 0xc4, 0x47, 0x81, 0x19, 0x49, 0x42, 0x02, 0xe8};
    std::array<uint8_t, 6> t_sqn = {0xfd, 0x8e, 0xef, 0x40, 0xdf, 0x7d};
    std::array<uint8_t, 2> t_amf = {0xaf, 0x17};
    std::array<uint8_t, 16> t_op = {0xff, 0x53, 0xba, 0xde, 0x17, 0xdf, 0x5d, 0x4e, 0x79, 0x30, 0x73, 0xce, 0x9d, 0x75, 0x79, 0xfa};

    std::array<uint8_t, 8> expected_f1 = {0x5d, 0xf5, 0xb3, 0x18, 0x07, 0xe2, 0x58, 0xb0};
    std::array<uint8_t, 8> expected_f1_star = {0xa8, 0xc0, 0x16, 0xe5, 0x1e, 0xf4, 0xa3, 0x43};

    kneedeepbts::crypto::Milenage dut_milenage(t_key, t_rand);
    dut_milenage.setOp(t_op);
    dut_milenage.runF1(t_sqn, t_amf);

    std::array<uint8_t, 8> output_f1 = dut_milenage.getMACA();
    std::array<uint8_t, 8> output_f1_star = dut_milenage.getMACS();

    for (int i = 0; i < 8; i++) {
        CHECK(expected_f1[i] == output_f1[i]);
        CHECK(expected_f1_star[i] == output_f1_star[i]);
    }
}

TEST_CASE("Testing the Milenage class with (4.5) Test Set 3") {
    spdlog::set_level(spdlog::level::info);
    kneedeepbts::crypto::MilenageKey t_key{0xfe, 0xc8, 0x6b, 0xa6, 0xeb, 0x70, 0x7e, 0xd0, 0x89, 0x05, 0x75, 0x7b, 0x1b, 0xb4, 0x4b, 0x8f};
    kneedeepbts::crypto::MilenageKey t_rand{0x9f, 0x7c, 0x8d, 0x02, 0x1a, 0xcc, 0xf4, 0xdb, 0x21, 0x3c, 0xcf, 0xf0, 0xc7, 0xf7, 0x1a, 0x6a};
    std::array<uint8_t, 6> t_sqn = {0x9d, 0x02, 0x77, 0x59, 0x5f, 0xfc};
    std::array<uint8_t, 2> t_amf = {0x72, 0x5c};
    std::array<uint8_t, 16> t_op = {0xdb, 0xc5, 0x9a, 0xdc, 0xb6, 0xf9, 0xa0, 0xef, 0x73, 0x54, 0x77, 0xb7, 0xfa, 0xdf, 0x83, 0x74};

    std::array<uint8_t, 8> expected_f1 = {0x9c, 0xab, 0xc3, 0xe9, 0x9b, 0xaf, 0x72, 0x81};
    std::array<uint8_t, 8> expected_f1_star = {0x95, 0x81, 0x4b, 0xa2, 0xb3, 0x04, 0x43, 0x24};

    kneedeepbts::crypto::Milenage dut_milenage(t_key, t_rand);
    dut_milenage.setOp(t_op);
    dut_milenage.runF1(t_sqn, t_amf);

    std::array<uint8_t, 8> output_f1 = dut_milenage.getMACA();
    std::array<uint8_t, 8> output_f1_star = dut_milenage.getMACS();

    for (int i = 0; i < 8; i++) {
        CHECK(expected_f1[i] == output_f1[i]);
        CHECK(expected_f1_star[i] == output_f1_star[i]);
    }
}

TEST_CASE("Testing the Milenage class with (4.6) Test Set 4") {
    spdlog::set_level(spdlog::level::info);
    kneedeepbts::crypto::MilenageKey t_key{0x9e, 0x59, 0x44, 0xae, 0xa9, 0x4b, 0x81, 0x16, 0x5c, 0x82, 0xfb, 0xf9, 0xf3, 0x2d, 0xb7, 0x51};
    kneedeepbts::crypto::MilenageKey t_rand{0xce, 0x83, 0xdb, 0xc5, 0x4a, 0xc0, 0x27, 0x4a, 0x15, 0x7c, 0x17, 0xf8, 0x0d, 0x01, 0x7b, 0xd6};
    std::array<uint8_t, 6> t_sqn = {0x0b, 0x60, 0x4a, 0x81, 0xec, 0xa8};
    std::array<uint8_t, 2> t_amf = {0x9e, 0x09};
    std::array<uint8_t, 16> t_op = {0x22, 0x30, 0x14, 0xc5, 0x80, 0x66, 0x94, 0xc0, 0x07, 0xca, 0x1e, 0xee, 0xf5, 0x7f, 0x00, 0x4f};

    std::array<uint8_t, 8> expected_f1 = {0x74, 0xa5, 0x82, 0x20, 0xcb, 0xa8, 0x4c, 0x49};
    std::array<uint8_t, 8> expected_f1_star = {0xac, 0x2c, 0xc7, 0x4a, 0x96, 0x87, 0x18, 0x37};

    kneedeepbts::crypto::Milenage dut_milenage(t_key, t_rand);
    dut_milenage.setOp(t_op);
    dut_milenage.runF1(t_sqn, t_amf);

    std::array<uint8_t, 8> output_f1 = dut_milenage.getMACA();
    std::array<uint8_t, 8> output_f1_star = dut_milenage.getMACS();

    for (int i = 0; i < 8; i++) {
        CHECK(expected_f1[i] == output_f1[i]);
        CHECK(expected_f1_star[i] == output_f1_star[i]);
    }
}

TEST_CASE("Testing the Milenage class with (4.7) Test Set 5") {
    spdlog::set_level(spdlog::level::info);
    kneedeepbts::crypto::MilenageKey t_key{0x4a, 0xb1, 0xde, 0xb0, 0x5c, 0xa6, 0xce, 0xb0, 0x51, 0xfc, 0x98, 0xe7, 0x7d, 0x02, 0x6a, 0x84};
    kneedeepbts::crypto::MilenageKey t_rand{0x74, 0xb0, 0xcd, 0x60, 0x31, 0xa1, 0xc8, 0x33, 0x9b, 0x2b, 0x6c, 0xe2, 0xb8, 0xc4, 0xa1, 0x86};
    std::array<uint8_t, 6> t_sqn = {0xe8, 0x80, 0xa1, 0xb5, 0x80, 0xb6};
    std::array<uint8_t, 2> t_amf = {0x9f, 0x07};
    std::array<uint8_t, 16> t_op = {0x2d, 0x16, 0xc5, 0xcd, 0x1f, 0xdf, 0x6b, 0x22, 0x38, 0x35, 0x84, 0xe3, 0xbe, 0xf2, 0xa8, 0xd8};

    std::array<uint8_t, 8> expected_f1 = {0x49, 0xe7, 0x85, 0xdd, 0x12, 0x62, 0x6e, 0xf2};
    std::array<uint8_t, 8> expected_f1_star = {0x9e, 0x85, 0x79, 0x03, 0x36, 0xbb, 0x3f, 0xa2};

    kneedeepbts::crypto::Milenage dut_milenage(t_key, t_rand);
    dut_milenage.setOp(t_op);
    dut_milenage.runF1(t_sqn, t_amf);

    std::array<uint8_t, 8> output_f1 = dut_milenage.getMACA();
    std::array<uint8_t, 8> output_f1_star = dut_milenage.getMACS();

    for (int i = 0; i < 8; i++) {
        CHECK(expected_f1[i] == output_f1[i]);
        CHECK(expected_f1_star[i] == output_f1_star[i]);
    }
}

TEST_CASE("Testing the Milenage class with (4.8) Test Set 6") {
    spdlog::set_level(spdlog::level::info);
    kneedeepbts::crypto::MilenageKey t_key{0x6c, 0x38, 0xa1, 0x16, 0xac, 0x28, 0x0c, 0x45, 0x4f, 0x59, 0x33, 0x2e, 0xe3, 0x5c, 0x8c, 0x4f};
    kneedeepbts::crypto::MilenageKey t_rand{0xee, 0x64, 0x66, 0xbc, 0x96, 0x20, 0x2c, 0x5a, 0x55, 0x7a, 0xbb, 0xef, 0xf8, 0xba, 0xbf, 0x63};
    std::array<uint8_t, 6> t_sqn = {0x41, 0x4b, 0x98, 0x22, 0x21, 0x81};
    std::array<uint8_t, 2> t_amf = {0x44, 0x64};
    std::array<uint8_t, 16> t_op = {0x1b, 0xa0, 0x0a, 0x1a, 0x7c, 0x67, 0x00, 0xac, 0x8c, 0x3f, 0xf3, 0xe9, 0x6a, 0xd0, 0x87, 0x25};

    std::array<uint8_t, 8> expected_f1 = {0x07, 0x8a, 0xdf, 0xb4, 0x88, 0x24, 0x1a, 0x57};
    std::array<uint8_t, 8> expected_f1_star = {0x80, 0x24, 0x6b, 0x8d, 0x01, 0x86, 0xbc, 0xf1};

    kneedeepbts::crypto::Milenage dut_milenage(t_key, t_rand);
    dut_milenage.setOp(t_op);
    dut_milenage.runF1(t_sqn, t_amf);

    std::array<uint8_t, 8> output_f1 = dut_milenage.getMACA();
    std::array<uint8_t, 8> output_f1_star = dut_milenage.getMACS();

    for (int i = 0; i < 8; i++) {
        CHECK(expected_f1[i] == output_f1[i]);
        CHECK(expected_f1_star[i] == output_f1_star[i]);
    }
}

// F2345
TEST_CASE("Testing the Milenage class with (5.3, 6.3) Test Set 1") {
    spdlog::set_level(spdlog::level::info);
    kneedeepbts::crypto::MilenageKey t_key{0x46, 0x5b, 0x5c, 0xe8, 0xb1, 0x99, 0xb4, 0x9f, 0xaa, 0x5f, 0x0a, 0x2e, 0xe2, 0x38, 0xa6, 0xbc};
    kneedeepbts::crypto::MilenageKey t_rand{0x23, 0x55, 0x3c, 0xbe, 0x96, 0x37, 0xa8, 0x9d, 0x21, 0x8a, 0xe6, 0x4d, 0xae, 0x47, 0xbf, 0x35};
    std::array<uint8_t, 16> t_op = {0xcd, 0xc2, 0x02, 0xd5, 0x12, 0x3e, 0x20, 0xf6, 0x2b, 0x6d, 0x67, 0x6a, 0xc7, 0x2c, 0xb3, 0x18};

    std::array<uint8_t, 8> expected_f2 = {0xa5, 0x42, 0x11, 0xd5, 0xe3, 0xba, 0x50, 0xbf};
    std::array<uint8_t, 16> expected_f3 = {0xb4, 0x0b, 0xa9, 0xa3, 0xc5, 0x8b, 0x2a, 0x05, 0xbb, 0xf0, 0xd9, 0x87, 0xb2, 0x1b, 0xf8, 0xcb};
    std::array<uint8_t, 16> expected_f4 = {0xf7, 0x69, 0xbc, 0xd7, 0x51, 0x04, 0x46, 0x04, 0x12, 0x76, 0x72, 0x71, 0x1c, 0x6d, 0x34, 0x41};
    std::array<uint8_t, 6> expected_f5 = {0xaa, 0x68, 0x9c, 0x64, 0x83, 0x70};
    std::array<uint8_t, 6> expected_f5_star = {0x45, 0x1e, 0x8b, 0xec, 0xa4, 0x3b};

    kneedeepbts::crypto::Milenage dut_milenage(t_key, t_rand);
    dut_milenage.setOp(t_op);
    dut_milenage.runF2345();

    std::array<uint8_t, 8> output_f2 = dut_milenage.getRES();
    std::array<uint8_t, 16> output_f3 = dut_milenage.getCK();
    std::array<uint8_t, 16> output_f4 = dut_milenage.getIK();
    std::array<uint8_t, 6> output_f5 = dut_milenage.getAK();
    std::array<uint8_t, 6> output_f5_star = dut_milenage.getAKR();

    for (int i = 0; i < 8; i++) {
        CHECK(expected_f2[i] == output_f2[i]);
    }
    for (int i = 0; i < 16; i++) {
        CHECK(expected_f3[i] == output_f3[i]);
        CHECK(expected_f4[i] == output_f4[i]);
    }
    for (int i = 0; i < 6; i++) {
        CHECK(expected_f5[i] == output_f5[i]);
        CHECK(expected_f5_star[i] == output_f5_star[i]);
    }
}

TEST_CASE("Testing the Milenage class with (5.4, 6.4) Test Set 2") {
    spdlog::set_level(spdlog::level::info);
    kneedeepbts::crypto::MilenageKey t_key{0x03, 0x96, 0xeb, 0x31, 0x7b, 0x6d, 0x1c, 0x36, 0xf1, 0x9c, 0x1c, 0x84, 0xcd, 0x6f, 0xfd, 0x16};
    kneedeepbts::crypto::MilenageKey t_rand{0xc0, 0x0d, 0x60, 0x31, 0x03, 0xdc, 0xee, 0x52, 0xc4, 0x47, 0x81, 0x19, 0x49, 0x42, 0x02, 0xe8};
    std::array<uint8_t, 16> t_op = {0xff, 0x53, 0xba, 0xde, 0x17, 0xdf, 0x5d, 0x4e, 0x79, 0x30, 0x73, 0xce, 0x9d, 0x75, 0x79, 0xfa};

    std::array<uint8_t, 8> expected_f2 = {0xd3, 0xa6, 0x28, 0xed, 0x98, 0x86, 0x20, 0xf0};
    std::array<uint8_t, 16> expected_f3 = {0x58, 0xc4, 0x33, 0xff, 0x7a, 0x70, 0x82, 0xac, 0xd4, 0x24, 0x22, 0x0f, 0x2b, 0x67, 0xc5, 0x56};
    std::array<uint8_t, 16> expected_f4 = {0x21, 0xa8, 0xc1, 0xf9, 0x29, 0x70, 0x2a, 0xdb, 0x3e, 0x73, 0x84, 0x88, 0xb9, 0xf5, 0xc5, 0xda};
    std::array<uint8_t, 6> expected_f5 = {0xc4, 0x77, 0x83, 0x99, 0x5f, 0x72};
    std::array<uint8_t, 6> expected_f5_star = {0x30, 0xf1, 0x19, 0x70, 0x61, 0xc1};

    kneedeepbts::crypto::Milenage dut_milenage(t_key, t_rand);
    dut_milenage.setOp(t_op);
    dut_milenage.runF2345();

    std::array<uint8_t, 8> output_f2 = dut_milenage.getRES();
    std::array<uint8_t, 16> output_f3 = dut_milenage.getCK();
    std::array<uint8_t, 16> output_f4 = dut_milenage.getIK();
    std::array<uint8_t, 6> output_f5 = dut_milenage.getAK();
    std::array<uint8_t, 6> output_f5_star = dut_milenage.getAKR();

    for (int i = 0; i < 8; i++) {
        CHECK(expected_f2[i] == output_f2[i]);
    }
    for (int i = 0; i < 16; i++) {
        CHECK(expected_f3[i] == output_f3[i]);
        CHECK(expected_f4[i] == output_f4[i]);
    }
    for (int i = 0; i < 6; i++) {
        CHECK(expected_f5[i] == output_f5[i]);
        CHECK(expected_f5_star[i] == output_f5_star[i]);
    }
}

TEST_CASE("Testing the Milenage class with (5.5, 6.5) Test Set 3") {
    spdlog::set_level(spdlog::level::info);
    kneedeepbts::crypto::MilenageKey t_key{0xfe, 0xc8, 0x6b, 0xa6, 0xeb, 0x70, 0x7e, 0xd0, 0x89, 0x05, 0x75, 0x7b, 0x1b, 0xb4, 0x4b, 0x8f};
    kneedeepbts::crypto::MilenageKey t_rand{0x9f, 0x7c, 0x8d, 0x02, 0x1a, 0xcc, 0xf4, 0xdb, 0x21, 0x3c, 0xcf, 0xf0, 0xc7, 0xf7, 0x1a, 0x6a};
    std::array<uint8_t, 16> t_op = {0xdb, 0xc5, 0x9a, 0xdc, 0xb6, 0xf9, 0xa0, 0xef, 0x73, 0x54, 0x77, 0xb7, 0xfa, 0xdf, 0x83, 0x74};

    std::array<uint8_t, 8> expected_f2 = {0x80, 0x11, 0xc4, 0x8c, 0x0c, 0x21, 0x4e, 0xd2};
    std::array<uint8_t, 16> expected_f3 = {0x5d, 0xbd, 0xbb, 0x29, 0x54, 0xe8, 0xf3, 0xcd, 0xe6, 0x65, 0xb0, 0x46, 0x17, 0x9a, 0x50, 0x98};
    std::array<uint8_t, 16> expected_f4 = {0x59, 0xa9, 0x2d, 0x3b, 0x47, 0x6a, 0x04, 0x43, 0x48, 0x70, 0x55, 0xcf, 0x88, 0xb2, 0x30, 0x7b};
    std::array<uint8_t, 6> expected_f5 = {0x33, 0x48, 0x4d, 0xc2, 0x13, 0x6b};
    std::array<uint8_t, 6> expected_f5_star = {0xde, 0xac, 0xdd, 0x84, 0x8c, 0xc6};

    kneedeepbts::crypto::Milenage dut_milenage(t_key, t_rand);
    dut_milenage.setOp(t_op);
    dut_milenage.runF2345();

    std::array<uint8_t, 8> output_f2 = dut_milenage.getRES();
    std::array<uint8_t, 16> output_f3 = dut_milenage.getCK();
    std::array<uint8_t, 16> output_f4 = dut_milenage.getIK();
    std::array<uint8_t, 6> output_f5 = dut_milenage.getAK();
    std::array<uint8_t, 6> output_f5_star = dut_milenage.getAKR();

    for (int i = 0; i < 8; i++) {
        CHECK(expected_f2[i] == output_f2[i]);
    }
    for (int i = 0; i < 16; i++) {
        CHECK(expected_f3[i] == output_f3[i]);
        CHECK(expected_f4[i] == output_f4[i]);
    }
    for (int i = 0; i < 6; i++) {
        CHECK(expected_f5[i] == output_f5[i]);
        CHECK(expected_f5_star[i] == output_f5_star[i]);
    }
}

TEST_CASE("Testing the Milenage class with (5.6, 6.6) Test Set 4") {
    spdlog::set_level(spdlog::level::info);
    kneedeepbts::crypto::MilenageKey t_key{0x9e, 0x59, 0x44, 0xae, 0xa9, 0x4b, 0x81, 0x16, 0x5c, 0x82, 0xfb, 0xf9, 0xf3, 0x2d, 0xb7, 0x51};
    kneedeepbts::crypto::MilenageKey t_rand{0xce, 0x83, 0xdb, 0xc5, 0x4a, 0xc0, 0x27, 0x4a, 0x15, 0x7c, 0x17, 0xf8, 0x0d, 0x01, 0x7b, 0xd6};
    std::array<uint8_t, 16> t_op = {0x22, 0x30, 0x14, 0xc5, 0x80, 0x66, 0x94, 0xc0, 0x07, 0xca, 0x1e, 0xee, 0xf5, 0x7f, 0x00, 0x4f};

    std::array<uint8_t, 8> expected_f2 = {0xf3, 0x65, 0xcd, 0x68, 0x3c, 0xd9, 0x2e, 0x96};
    std::array<uint8_t, 16> expected_f3 = {0xe2, 0x03, 0xed, 0xb3, 0x97, 0x15, 0x74, 0xf5, 0xa9, 0x4b, 0x0d, 0x61, 0xb8, 0x16, 0x34, 0x5d};
    std::array<uint8_t, 16> expected_f4 = {0x0c, 0x45, 0x24, 0xad, 0xea, 0xc0, 0x41, 0xc4, 0xdd, 0x83, 0x0d, 0x20, 0x85, 0x4f, 0xc4, 0x6b};
    std::array<uint8_t, 6> expected_f5 = {0xf0, 0xb9, 0xc0, 0x8a, 0xd0, 0x2e};
    std::array<uint8_t, 6> expected_f5_star = {0x60, 0x85, 0xa8, 0x6c, 0x6f, 0x63};

    kneedeepbts::crypto::Milenage dut_milenage(t_key, t_rand);
    dut_milenage.setOp(t_op);
    dut_milenage.runF2345();

    std::array<uint8_t, 8> output_f2 = dut_milenage.getRES();
    std::array<uint8_t, 16> output_f3 = dut_milenage.getCK();
    std::array<uint8_t, 16> output_f4 = dut_milenage.getIK();
    std::array<uint8_t, 6> output_f5 = dut_milenage.getAK();
    std::array<uint8_t, 6> output_f5_star = dut_milenage.getAKR();

    for (int i = 0; i < 8; i++) {
        CHECK(expected_f2[i] == output_f2[i]);
    }
    for (int i = 0; i < 16; i++) {
        CHECK(expected_f3[i] == output_f3[i]);
        CHECK(expected_f4[i] == output_f4[i]);
    }
    for (int i = 0; i < 6; i++) {
        CHECK(expected_f5[i] == output_f5[i]);
        CHECK(expected_f5_star[i] == output_f5_star[i]);
    }
}

TEST_CASE("Testing the Milenage class with (5.7, 6.7) Test Set 5") {
    spdlog::set_level(spdlog::level::info);
    kneedeepbts::crypto::MilenageKey t_key{0x4a, 0xb1, 0xde, 0xb0, 0x5c, 0xa6, 0xce, 0xb0, 0x51, 0xfc, 0x98, 0xe7, 0x7d, 0x02, 0x6a, 0x84};
    kneedeepbts::crypto::MilenageKey t_rand{0x74, 0xb0, 0xcd, 0x60, 0x31, 0xa1, 0xc8, 0x33, 0x9b, 0x2b, 0x6c, 0xe2, 0xb8, 0xc4, 0xa1, 0x86};
    std::array<uint8_t, 16> t_op = {0x2d, 0x16, 0xc5, 0xcd, 0x1f, 0xdf, 0x6b, 0x22, 0x38, 0x35, 0x84, 0xe3, 0xbe, 0xf2, 0xa8, 0xd8};

    std::array<uint8_t, 8> expected_f2 = {0x58, 0x60, 0xfc, 0x1b, 0xce, 0x35, 0x1e, 0x7e};
    std::array<uint8_t, 16> expected_f3 = {0x76, 0x57, 0x76, 0x6b, 0x37, 0x3d, 0x1c, 0x21, 0x38, 0xf3, 0x07, 0xe3, 0xde, 0x92, 0x42, 0xf9};
    std::array<uint8_t, 16> expected_f4 = {0x1c, 0x42, 0xe9, 0x60, 0xd8, 0x9b, 0x8f, 0xa9, 0x9f, 0x27, 0x44, 0xe0, 0x70, 0x8c, 0xcb, 0x53};
    std::array<uint8_t, 6> expected_f5 = {0x31, 0xe1, 0x1a, 0x60, 0x91, 0x18};
    std::array<uint8_t, 6> expected_f5_star = {0xfe, 0x25, 0x55, 0xe5, 0x4a, 0xa9};

    kneedeepbts::crypto::Milenage dut_milenage(t_key, t_rand);
    dut_milenage.setOp(t_op);
    dut_milenage.runF2345();

    std::array<uint8_t, 8> output_f2 = dut_milenage.getRES();
    std::array<uint8_t, 16> output_f3 = dut_milenage.getCK();
    std::array<uint8_t, 16> output_f4 = dut_milenage.getIK();
    std::array<uint8_t, 6> output_f5 = dut_milenage.getAK();
    std::array<uint8_t, 6> output_f5_star = dut_milenage.getAKR();

    for (int i = 0; i < 8; i++) {
        CHECK(expected_f2[i] == output_f2[i]);
    }
    for (int i = 0; i < 16; i++) {
        CHECK(expected_f3[i] == output_f3[i]);
        CHECK(expected_f4[i] == output_f4[i]);
    }
    for (int i = 0; i < 6; i++) {
        CHECK(expected_f5[i] == output_f5[i]);
        CHECK(expected_f5_star[i] == output_f5_star[i]);
    }
}

TEST_CASE("Testing the Milenage class with (5.8, 6.8) Test Set 6") {
    spdlog::set_level(spdlog::level::info);
    kneedeepbts::crypto::MilenageKey t_key{0x6c, 0x38, 0xa1, 0x16, 0xac, 0x28, 0x0c, 0x45, 0x4f, 0x59, 0x33, 0x2e, 0xe3, 0x5c, 0x8c, 0x4f};
    kneedeepbts::crypto::MilenageKey t_rand{0xee, 0x64, 0x66, 0xbc, 0x96, 0x20, 0x2c, 0x5a, 0x55, 0x7a, 0xbb, 0xef, 0xf8, 0xba, 0xbf, 0x63};
    std::array<uint8_t, 16> t_op = {0x1b, 0xa0, 0x0a, 0x1a, 0x7c, 0x67, 0x00, 0xac, 0x8c, 0x3f, 0xf3, 0xe9, 0x6a, 0xd0, 0x87, 0x25};

    std::array<uint8_t, 8> expected_f2 = {0x16, 0xc8, 0x23, 0x3f, 0x05, 0xa0, 0xac, 0x28};
    std::array<uint8_t, 16> expected_f3 = {0x3f, 0x8c, 0x75, 0x87, 0xfe, 0x8e, 0x4b, 0x23, 0x3a, 0xf6, 0x76, 0xae, 0xde, 0x30, 0xba, 0x3b};
    std::array<uint8_t, 16> expected_f4 = {0xa7, 0x46, 0x6c, 0xc1, 0xe6, 0xb2, 0xa1, 0x33, 0x7d, 0x49, 0xd3, 0xb6, 0x6e, 0x95, 0xd7, 0xb4};
    std::array<uint8_t, 6> expected_f5 = {0x45, 0xb0, 0xf6, 0x9a, 0xb0, 0x6c};
    std::array<uint8_t, 6> expected_f5_star = {0x1f, 0x53, 0xcd, 0x2b, 0x11, 0x13};

    kneedeepbts::crypto::Milenage dut_milenage(t_key, t_rand);
    dut_milenage.setOp(t_op);
    dut_milenage.runF2345();

    std::array<uint8_t, 8> output_f2 = dut_milenage.getRES();
    std::array<uint8_t, 16> output_f3 = dut_milenage.getCK();
    std::array<uint8_t, 16> output_f4 = dut_milenage.getIK();
    std::array<uint8_t, 6> output_f5 = dut_milenage.getAK();
    std::array<uint8_t, 6> output_f5_star = dut_milenage.getAKR();

    for (int i = 0; i < 8; i++) {
        CHECK(expected_f2[i] == output_f2[i]);
    }
    for (int i = 0; i < 16; i++) {
        CHECK(expected_f3[i] == output_f3[i]);
        CHECK(expected_f4[i] == output_f4[i]);
    }
    for (int i = 0; i < 6; i++) {
        CHECK(expected_f5[i] == output_f5[i]);
        CHECK(expected_f5_star[i] == output_f5_star[i]);
    }
}
